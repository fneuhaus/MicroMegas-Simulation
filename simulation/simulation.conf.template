# Units:
#   Length: cm (1µm = 1e-4cm)
#   Fields: V/cm

# ↑ z                       ╲
#  particleconversion ╭ ├────── ... ───┤╴ z = z_cathode and drift:z_max
#                     │ │     ╲        │
#                     │ │     │╲       │
#               drift ┤ │     │ ╲      │
#                     │ │     │ │╲     │
#                     │ │     │ │ ╲    │╴ z = drift:z_min and amplification:z_max
#                     ├ ├┈┈┈┈┈┈ ... ┈┈┈┤╴ z = 0
#       amplification │ │    ┊┊┊┊┊ ┊┊  │╴ z = amplification:z_min
#                     ╰ └────── ... ───┘
#                       ├── size_x/y ──┤

[general]
   # path to the project root
   project_path = /localscratch/micromegas/simulation

   # path to save the results to
   output_path = ${project_path}/outfiles

   # space above the mesh to stop the drift and start the amplification simulation
   z_transition = 100.e-4

   # energy (in keV) and direction (in degrees) of the incoming particle
   particle_type = gamma
   particle_energy = 10
   particle_direction_theta = 0
   particle_direction_phi   = 0
   number_of_particles = 1

[detector]
   # the xy size of the detector, realistic value ~10cm
   size_x = 4.5
   size_y = ${size_x}

   # gas composition used to simulate the drift and amplification (e.g. 93:7 Ar:CO2)
   # the syntax is the one of a python dictionary
   # example: {'ar':93., 'co2':7.} for Ar:CO2 93:7 or {'xe':100.} for pure Xenon
   # known gases are: 'ar', 'xe', 'ne', 'co2', 'ch4', 'c3h8', 'c4h10', 'cf4' (case sensitive!)
   # additional gases can be defined in photoconversion/src/DetectorConstruction.cpp
   gas_composition = {'ar':90., 'co2':10.}
   #gas_composition = {'xe':100.}
   #gas_composition = {'ar':100.}
   #gas_composition = {'ar':98., 'c4h10':2.}

   # gas pressure in kPa (100kPa = 1bar)
   pressure = 100.
   # gas temperature in °C
   temperature = 20.

   # Penning transfer, 
   penning_transfer_enable = 1
   penning_transfer_gas = { 'ar': 0.42 }

   # cathode foil thickness
   cathode_thickness = 4.e-4
   cathode_material = G4_MYLAR

[particleconversion]
   # output filename in general["output_path"]
   out_filename = ${general:output_path}/particleconversion.root

   # macro folder path
   macro_folder = ${general:project_path}/particleconversion/

   # macro path, if no path is defined interactive mode will be used
   macro_path = ${general:project_path}/particleconversion/run.mac

   # z coordinate of the lower end of the cathode (z_cathode - general:z_transition defines the thickness of gas volume)
   z_cathode = 1.

   # Maximum stepping size
   max_step_size = 0.0001 mm

[drift]
   # input file from conversion simulation
   in_filename = ${particleconversion:out_filename}

   # output filename in general["output_path"]
   out_filename = ${general:output_path}/drift.root

   # save the drift lines
   save_drift_lines = 0
   drift_lines_path = ${general:output_path}/drift_lines.root
   drift_lines_skipping_factor = 100

   # z boundaries of the simulation (drift simulation should end about 100µm above the mesh where the field gets inhomogeneous, value from: http://iopscience.iop.org/article/10.1088/1748-0221/6/06/P06011/pdf)
   z_max = ${particleconversion:z_cathode}
   z_min = ${general:z_transition}

   # constrain the maximum avalanche size (if 0 is set no constrains are used)
   max_avalanche_size = 0

   # Field in the drift region in V/cm
   field = -600

[amplification]
   # input file from drift simulation
   in_filename = ${drift:out_filename}

   # output filename in general["output_path"]
   out_filename = ${general:output_path}/avalanche.root

   # path of the geometry files
   mesh_file = ${general:project_path}/avalanche/fields/simple_40kv_600v.txt

   # Do only drift (if true AvalancheMicroscopic->Drift is used instead of
   # AvalancheMicroscopic->Avalanche
   study_transparency = 0

   # Output options
   # Save all branches in trees
   save_tree = 0

   # Save histograms
   save_hists = 1
   save_variables = {'nele': 400, 'nelep': 400, 'gain': 400, 'x0': 200, 'y0': 200, 'z0': 200, 't0': 200, 'x1': 200, 'y1': 200, 'z1': 200, 't1': 200}

   # enable saving of coordinates
   save_electron_coordinates = 0

   # enable signal calculation
   signal_calculation_enable = True 
   signal_calculation_t_min = 0
   signal_calculation_t_stepsize = 0.1
   signal_calculation_t_steps = 100

   # save the drift lines
   save_drift_lines = 1
   drift_lines_path = ${general:output_path}/drift_lines_avalance.root
   drift_lines_skipping_factor = 10

   # save electric field / save electric field
   # if you don't want to save the plot remove `draw_field_path`
   save_electric_field = 0
   electric_field_xbins = 400
   electric_field_ybins = 250
   electric_field_xmin = -0.01250
   electric_field_xmax = 0.01250
   electric_field_zmin = areaZmin
   electric_field_zmax = 0.003
   electric_field_path = ${general:output_path}/field.root
   plot_only = 0

   # timing information
   store_time_per_event = 1

   # size of the amplification gap (normally 128µm)
   gap = 128e-4

   # z boundaries of the amplification simulation (to test the mesh transparency z_min=-20µm is a good value to save simulation time)
   z_max = ${drift:z_min}
   z_min = -${amplification:gap}

   # some additional safety distance to prevent electrons from getting captured at the upper z boundary (with: z_max + z_max_safety < space above the mesh in the CAD model)
   z_max_safety = 200e-4

   # constrain the maximum avalanche size (if 0 is set no constrains are used)
   max_avalanche_size = 0

   # height of the conversion zone between drift and amplification simulation, determined by the CAD model
   # used to calculate the voltages for the ElmerSolver input file
   conversion_zone_height = 300e-4

   # Use local time (use only the time in the amplification region)
   use_local_time = 1
